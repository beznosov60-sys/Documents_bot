import html
from pathlib import Path
from typing import List

from aiogram import Router, types, F
from aiogram.types import PhotoSize, FSInputFile
from bot.services.ocr_engine import process_passport_image, preprocess_image

router = Router()
UPLOADS_DIR = Path("uploads"); UPLOADS_DIR.mkdir(exist_ok=True)

@router.message(F.document & (F.document.mime_type.contains("image") | F.document.mime_type == "application/pdf"))
async def handle_passport_document(message: types.Message) -> None:
    doc = message.document
    file = await message.bot.get_file(doc.file_id)
    ext = Path(doc.file_name or "scan").suffix or ".jpg"
    file_path = UPLOADS_DIR / f"{doc.file_unique_id}{ext}"
    await message.bot.download(file, destination=file_path)
    await _run_ocr_and_reply(message, file_path)

@router.message(F.photo)
async def handle_passport_photo(message: types.Message) -> None:
    assert message.photo is not None
    photos: List[PhotoSize] = message.photo
    photo = photos[-1]
    file = await message.bot.get_file(photo.file_id)
    file_path = UPLOADS_DIR / f"{photo.file_unique_id}.jpg"
    await message.bot.download(file, destination=file_path)
    await _run_ocr_and_reply(message, file_path)

async def _run_ocr_and_reply(message: types.Message, file_path: Path) -> None:
    await message.answer("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞‚Ä¶")
    clean_path = preprocess_image(file_path)
    if clean_path.exists():
        await message.answer_photo(FSInputFile(str(clean_path)), caption="üßº –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è OCR")

    data = await process_passport_image(file_path)
    if not data:
        await message.answer("üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. –û—Ç–ø—Ä–∞–≤—å –æ—Ä–∏–≥–∏–Ω–∞–ª –∫–∞–∫ *—Ñ–∞–π–ª* (–Ω–µ —Ñ–æ—Ç–æ) –∏ —Ä–æ–≤–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç.", parse_mode=None)
        return

    lines = ["‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:"]
    if data.get("fio"): lines.append(f"–§–ò–û: {data['fio']}")
    if data.get("series") or data.get("number"):
        lines.append(f"–°–µ—Ä–∏—è/–Ω–æ–º–µ—Ä: {data.get('series','?')} {data.get('number','?')}")
    if data.get("birth_date"): lines.append(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birth_date']}")
    if data.get("issue_date"): lines.append(f"–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {data['issue_date']}")
    if data.get("department_code"): lines.append(f"–ö–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {data['department_code']}")

    # debug-—Ö–≤–æ—Å—Ç (—É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π)
    lines.append("\n‚Äî debug ‚Äî")
    lines.append(f"dates: {data.get('dates')}")
    lines.append(f"variant: {data.get('variant')}")
    lines.append(f"raw_text:\n{(data.get('raw_text') or '')[:700]}")

    await message.answer("\n".join(lines), parse_mode=None)
